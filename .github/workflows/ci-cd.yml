name: CI-CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build & Test (Java + Angular)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Maven build (includes Angular build via frontend-maven-plugin)
        run: ./mvnw -B clean verify

      - name: Archive Surefire reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports
          path: '**/target/surefire-reports/*.xml'

      - name: Archive Angular coverage (if produced)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: angular-coverage
          path: 'tenisu-front/coverage/**'
          if-no-files-found: ignore

  docker-image:
    name: Build & Push Docker Image
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      IMAGE_NAME: tenisu
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Hub login (skips if secrets missing)
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          if [ -n "$DOCKERHUB_USERNAME" ] && [ -n "$DOCKERHUB_TOKEN" ]; then
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            echo "Logged in to Docker Hub as $DOCKERHUB_USERNAME"
          else
            echo "Docker Hub secrets missing; skipping login"
          fi

      - name: GitHub Container Registry login
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Extract version
        id: vars
        run: |
          VERSION=$(grep -m1 '<version>' pom.xml | sed -E 's/.*<version>([^<]+)<\/version>.*/\1/')
          SHORT_SHA=${GITHUB_SHA::7}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Build and push image (GHCR only if no DockerHub login)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.version }}-${{ steps.vars.outputs.short_sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: (Optional) Notify Render via Deploy Hook
        env:
          RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        run: |
          if [ -n "$RENDER_DEPLOY_HOOK_URL" ]; then
            echo "Triggering Render deploy hook"
            curl -fsSL -X POST "$RENDER_DEPLOY_HOOK_URL" || echo "Render deploy hook failed (non-blocking)"
          else
            echo "No Render deploy hook URL provided; skipping"
          fi

  render-deploy-from-source:
    name: Trigger Render build (Source)
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render deploy (from source)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          if [ -n "$RENDER_API_KEY" ] && [ -n "$RENDER_SERVICE_ID" ]; then
            echo "Triggering Render source deploy"
            curl -fsSL -X POST \
              -H 'Accept: application/json' \
              -H "Authorization: Bearer $RENDER_API_KEY" \
              https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys || exit 1
          else
            echo "Render secrets missing; skipping source deploy"
          fi
